// Generated by CoffeeScript 1.6.2
(function() {
  var addBuget, clearBudget, createJakeDialog, createRexDialog, createTelescopeDialogs, createWalloDialogs, createYrionDialog, defCell, fillBudget, initialAvailableToPlace, initializeMoon, processBudget, setupDialog, updateInterface, updateState,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  initializeMoon = function(width, height) {
    var moon, _i, _ref, _results;

    moon = {
      width: width,
      height: height,
      cells: []
    };
    (function() {
      _results = [];
      for (var _i = 0, _ref = width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      var _i, _ref, _results;

      return (function() {
        _results = [];
        for (var _i = 0, _ref = height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(j) {
        return moon.cells.push(defCell());
      });
    });
    return moon;
  };

  defCell = function() {
    var alumina, he3, rock, silica;

    silica = Math.random() * 0.5;
    he3 = Math.random() * 0.2;
    alumina = Math.random() * 0.3;
    rock = 1 - silica - he3 - alumina;
    return {
      resourceDensity: {
        rock: Number(rock.toFixed(1)),
        silica: Number(silica.toFixed(1)),
        he3: Number(he3.toFixed(1)),
        alumina: Number(alumina.toFixed(1))
      }
    };
  };

  initialAvailableToPlace = function() {
    var i, k;

    return ((function() {
      var _ref, _results;

      _ref = this.HIS.data.things;
      _results = [];
      for (k in _ref) {
        i = _ref[k];
        if (__indexOf.call(i.keywords, 'delivery') >= 0) {
          _results.push(i);
        }
      }
      return _results;
    }).call(this)).reduce((function(m, i) {
      m[i.id] = {
        id: i.id,
        quantity: 0
      };
      return m;
    }), {});
  };

  updateState = function() {
    var battery, change, k, resourceChange, _base, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _results;

    console.log("Updating Game State");
    if ((_ref = (_base = this.HIS.state).availableToPlace) == null) {
      _base.availableToPlace = initialAvailableToPlace();
    }
    this.HIS.state.turn++;
    this.HIS.state.events.filter(function(e) {
      return e.turn === HIS.state.turn;
    }).map(function(e) {
      return e.action.apply(HIS, e.args);
    });
    _ref1 = this.HIS.findCellsByThingId('battery');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      battery = _ref1[_i];
      if (battery.thing.generator.energy > 0) {
        battery.thing.generator.energy -= 1;
      }
    }
    resourceChange = this.HIS.resourceStatus();
    _ref2 = ['aluminum', 'bricks', 'he3', 'silicon'];
    _results = [];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      k = _ref2[_j];
      change = ((_ref3 = resourceChange[k].input) != null ? _ref3 : 0) - ((_ref4 = resourceChange[k].output) != null ? _ref4 : 0);
      console.log("added " + (((_ref5 = resourceChange[k].input) != null ? _ref5 : 0) - ((_ref6 = resourceChange[k].output) != null ? _ref6 : 0)) + " k");
      _results.push(this.HIS.state.resources[k] += change);
    }
    return _results;
  };

  addBuget = function() {
    var i, k, _ref;

    console.log("Adding budget to the moon");
    _ref = this.HIS.state.budget.regular;
    for (k in _ref) {
      i = _ref[k];
      this.HIS.state.availableToPlace[i.id].quantity += i.quantity;
    }
    this.HIS.state.resources.robots += this.HIS.state.availableToPlace.scv.quantity;
    return this.HIS.state.availableToPlace.scv.quantity = 0;
  };

  clearBudget = function() {
    console.log("Clearing budget array");
    this.HIS.state.budget.regular = initialAvailableToPlace();
    return this.HIS.state.budget.special = [];
  };

  this.HIS = {
    beforeMeetingListener: [updateState],
    beforeMeeting: function() {
      return this.beforeMeetingListener.map(function(l) {
        return l();
      });
    },
    beforeBudgetListener: [],
    beforeBudget: function() {
      return this.beforeBudgetListener.map(function(l) {
        return l();
      });
    },
    beforeMoonListener: [addBuget, clearBudget],
    beforeMoon: function() {
      return this.beforeMoonListener.map(function(l) {
        return l();
      });
    }
  };

  this.HIS.state = {
    turn: -1,
    events: [],
    firstJakeQuestCompleted: 'notGiven',
    secondJakeQuestCompleted: 'notGiven',
    resources: {
      money: 300,
      he3: 0,
      aluminum: 500,
      silicon: 500,
      bricks: 1500,
      robots: 0
    },
    moon: initializeMoon(12, 8),
    currentDialog: {
      guided: '',
      nonGuided: ''
    },
    budget: {
      regular: {},
      special: []
    }
  };

  this.HIS.data = {
    things: {
      'cs': {
        id: 'cs',
        name: 'Construction Site',
        image_url: 'icon-cloud-upload',
        keywords: []
      }
    },
    advisors: {
      'rex_charger': {
        id: 'rex_charger',
        name: 'Rex Charger',
        specialty: 'Sustainable Energy Specialist'
      },
      'dr_yrion': {
        id: 'dr_yrion',
        name: 'Dr. Yrion',
        specialty: 'NASA Evangelist'
      },
      'col_telescope': {
        id: 'col_telescope',
        name: 'Colonel Telescope',
        specialty: 'Senior Optical Technician at SETI'
      },
      'dr_wallo': {
        id: 'dr_wallo',
        name: 'Dr. Wallo',
        specialty: 'Senior Research Scientist'
      },
      'jake': {
        id: 'jake',
        name: 'Jake Rockwell',
        specialty: 'Secretary of Military and Strategic Defense'
      }
    }
  };

  this.HIS.dataDef = function(id, name, image_url, keywords) {
    return {
      id: id,
      name: name,
      image_url: image_url,
      keywords: keywords
    };
  };

  this.HIS.buildDef = function(costs, factoryIds, robots, turns, bricks, aluminum, silicon, data) {
    data.keywords.push('build');
    data['build'] = {
      costs: costs,
      factoryIds: factoryIds,
      robots: robots,
      turns: turns,
      bricks: bricks,
      aluminum: aluminum,
      silicon: silicon
    };
    return data;
  };

  this.HIS.deliveryDef = function(costs, data) {
    data.keywords.push('delivery');
    data['delivery'] = {
      costs: costs
    };
    return data;
  };

  this.HIS.maintenanceDef = function(energy, robots, he3, data) {
    data.keywords.push('maintenance');
    data['maintenance'] = {
      energy: energy,
      robots: robots,
      he3: he3
    };
    return data;
  };

  this.HIS.generatorDef = function(energy, he3, bricks, aluminum, silicon, storage, data) {
    data.keywords.push('generator');
    data['generator'] = {
      energy: energy,
      he3: he3,
      bricks: bricks,
      aluminum: aluminum,
      silicon: silicon,
      storage: storage
    };
    return data;
  };

  this.HIS.findCellsByThingId = function(id) {
    return this.state.moon.cells.filter(function(c) {
      if (c.thing !== void 0) {
        return c.thing.id === id;
      }
    });
  };

  this.HIS.findCellsByKeyword = function(keyword) {
    return this.state.moon.cells.filter(function(c) {
      if (c.thing !== void 0) {
        return __indexOf.call(c.thing.keywords, keyword) >= 0;
      }
    });
  };

  this.HIS.win = function(victoryCondition) {
    return console.log("You have achieved a " + victoryCondition + " Victory!");
  };

  this.HIS.inputByResource = function(keyword) {
    return this.findCellsByKeyword(keyword).map(function(c) {
      return c.thing.generator[keyword];
    }).reduce((function(a, b) {
      return a + b;
    }), 0);
  };

  this.HIS.outputByResource = function(keyword) {
    return this.findCellsByKeyword(keyword).map(function(c) {
      return c.thing.maintenance[keyword];
    }).reduce((function(a, b) {
      return a + b;
    }), 0);
  };

  this.HIS.resourceStatus = function() {
    var ei, eo, inputByResource, outputByResource, si, so;

    inputByResource = function(keyword, resourceCalculator) {
      return this.HIS.findCellsByKeyword(keyword).filter(function(c) {
        return c.thing.generator !== void 0 && c.thing.generator[keyword] !== void 0;
      }).map(function(c) {
        return resourceCalculator(c.thing.generator[keyword], c);
      }).reduce((function(m, b) {
        return m + b;
      }), 0);
    };
    outputByResource = function(keyword, resourceCalculator) {
      if (resourceCalculator === void 0) {
        resourceCalculator = function(r, c) {
          return r;
        };
      }
      return this.HIS.findCellsByKeyword(keyword).filter(function(c) {
        return c.thing.maintenance !== void 0 && c.thing.maintenance[keyword] !== void 0;
      }).map(function(c) {
        return resourceCalculator(c.thing.maintenance[keyword], c);
      }).reduce((function(m, b) {
        return m + b;
      }), 0);
    };
    ei = inputByResource('energy', function(r, c) {
      return r;
    });
    eo = outputByResource('energy', function(r, c) {
      if (c.thing.working) {
        return r;
      } else {
        return 0;
      }
    });
    si = inputByResource('storage', function(r, c) {
      return r;
    });
    so = outputByResource('storage');
    return {
      energy: {
        input: ei,
        output: eo,
        gross: ei - eo
      },
      he3: {
        input: inputByResource('he3', function(r, c) {
          return r * c.resourceDensity.he3;
        }),
        output: outputByResource('he3'),
        total: this.state.resources.he3
      },
      bricks: {
        input: inputByResource('bricks', function(r, c) {
          return r * c.resourceDensity.rock;
        }),
        output: outputByResource('bricks'),
        total: this.state.resources.bricks
      },
      aluminum: {
        input: inputByResource('aluminum', function(r, c) {
          return r * c.resourceDensity.alumina;
        }),
        total: this.state.resources.aluminum
      },
      silicon: {
        input: inputByResource('silicon', function(r, c) {
          return r * c.resourceDensity.silica;
        }),
        total: this.state.resources.silicon
      },
      storage: {
        input: si,
        output: so,
        gross: si - so
      }
    };
  };

  this.HIS.checkBuildResources = function(thingId) {
    return this.data.things[thingId].build.costs <= this.state.resources.money && this.data.things[thingId].build.aluminum <= this.state.resources.aluminum && this.data.things[thingId].build.silicon <= this.state.resources.silicon && this.data.things[thingId].build.bricks <= this.state.resources.bricks && this.data.things[thingId].build.robots <= this.state.resources.robots;
  };

  this.HIS.discountBuildResources = function(thingId) {
    this.state.resources.money -= this.data.things[thingId].build.costs;
    this.state.resources.aluminum -= this.data.things[thingId].build.aluminum;
    this.state.resources.silicon -= this.data.things[thingId].build.silicon;
    this.state.resources.bricks -= this.data.things[thingId].build.bricks;
    return this.state.resources.robots -= this.data.things[thingId].build.robots;
  };

  this.HIS.isBuildable = function(thingId, cellIndex) {
    return this.checkBuildResources(thingId) && this.HIS.state.moon.cells[cellIndex].thing === void 0 && __indexOf.call(this.HIS.data.things[thingId].keywords, 'build') >= 0;
  };

  this.HIS.createSCV = function() {
    this.discountBuildResources('scv');
    return this.state.resources.robots++;
  };

  this.HIS.build = function(thingId, cellIndex) {
    var actionWhenReady, t, turnWhenReady;

    this.discountBuildResources(thingId);
    this.place('cs', cellIndex);
    t = this.data.things[thingId];
    if (t.build.costs > 0) {
      HIS.state.budget.special.push({
        name: "Special equipement " + t.name,
        value: t.build.costs
      });
    }
    if (t.id === 'laser') {
      this.state.firstJakeQuestCompleted = 'completed';
    }
    if (t.id === 'shield') {
      this.state.secondJakeQuestCompleted = 'completed';
      this.win("Defense and Expansion");
    }
    turnWhenReady = this.state.turn + t.build.turns;
    actionWhenReady = function(thingId, cellIndex) {
      this.place(thingId, cellIndex);
      return this.state.resources.robots += this.data.things[thingId].build.robots;
    };
    return this.state.events.push({
      turn: turnWhenReady,
      action: actionWhenReady,
      args: [thingId, cellIndex]
    });
  };

  this.HIS.buildables = function() {
    return $.map(this.data.things, function(a) {
      return a;
    }).filter(function(t) {
      if (t.id === 'laser' && !(HIS.state.firstJakeQuestCompleted === 'given')) {
        return false;
      }
      if (t.id === 'shield' && !(HIS.state.secondJakeQuestCompleted === 'given')) {
        return false;
      }
      return t.build && HIS.checkBuildResources(t.id) && (__indexOf.call(t.keywords, 'build') >= 0);
    });
  };

  this.HIS.isPlaceable = function(thingId, cellIndex) {
    return this.state.moon.cells[cellIndex].thing === void 0 && __indexOf.call(this.HIS.data.things[thingId].keywords, 'delivery') >= 0 && this.state.availableToPlace[thingId].quantity > 0;
  };

  this.HIS.placeFromAvailables = function(thingId, cellIndex) {
    this.place(thingId, cellIndex);
    return this.state.availableToPlace[thingId].quantity--;
  };

  this.HIS.place = function(thingId, cellIndex) {
    var cell, s, t;

    console.log("place thingId=" + thingId + " cellIndex=" + cellIndex);
    cell = this.state.moon.cells[cellIndex];
    t = this.data.things[thingId];
    s = {};
    if (__indexOf.call(t.keywords, 'maintenance') >= 0) {
      s = {
        working: false
      };
    }
    cell['thing'] = $.extend(true, s, t);
    return cell;
  };

  this.HIS.data.things.scv = this.HIS.deliveryDef(20, this.HIS.buildDef(2, ['robotFactory'], 2, 1, 0, 15, 30, this.HIS.dataDef('scv', 'SCV', 'icon-wrench', ['robot'])));

  this.HIS.data.things.vacuum = this.HIS.deliveryDef(50, this.HIS.maintenanceDef(1, 0, 0, this.HIS.generatorDef(0, 3, 0, 0, 0, 0, this.HIS.dataDef('vacuum', 'Lunar Vacuum', 'icon-wrench', ['energy', 'he3']))));

  this.HIS.data.things.bulldozer = this.HIS.deliveryDef(200, this.HIS.maintenanceDef(13, 0, 0, this.HIS.generatorDef(0, 13, 0, 0, 0, 0, this.HIS.dataDef('bulldozer', 'Bulldozer', 'icon-road', ['energy', 'he3']))));

  this.HIS.data.things.he3Extractor = this.HIS.buildDef(50, ['advancedPrinter'], 8, 4, 0, 100, 300, this.HIS.maintenanceDef(3, 4, 0, this.HIS.generatorDef(0, 100, 0, 0, 0, 0, this.HIS.dataDef('he3Extractor', 'He3 Extractor', 'icon-print', ['energy', 'he3', 'robots']))));

  this.HIS.data.things.drill = this.HIS.buildDef(10, [], 1, 2, 0, 0, 0, this.HIS.maintenanceDef(12, 1, 0, this.HIS.generatorDef(0, 0, 20, 0, 0, 0, this.HIS.dataDef('drill', 'Super Drill', 'icon-pushpin', ['drill', 'bricks', 'energy', 'robots']))));

  this.HIS.data.things.aluminumExtractor = this.HIS.buildDef(20, ['basicPrinter'], 4, 3, 100, 0, 0, this.HIS.maintenanceDef(50, 5, 0, this.HIS.generatorDef(0, 0, 0, 3, 0, 0, this.HIS.dataDef('aluminumExtractor', 'Aluminum Extractor', 'icon-paper-clip', ['energy', 'aluminum', 'robots']))));

  this.HIS.data.things.siliconExtractor = this.HIS.buildDef(20, ['basicPrinter'], 3, 4, 200, 0, 0, this.HIS.maintenanceDef(20, 8, 0, this.HIS.generatorDef(0, 0, 0, 0, 6, 0, this.HIS.dataDef('siliconExtractor', 'Silicon Extractor', 'icon-magnet', ['energy', 'silicon', 'robots']))));

  this.HIS.data.things.waterExtractor = this.HIS.buildDef(100, ['advancedPrinter'], 12, 8, 100, 150, 500, this.HIS.maintenanceDef(10, 3, 0, this.HIS.dataDef('waterExtractor', 'Water Extractor', 'icon-leaf', ['energy', 'robots'])));

  this.HIS.data.things.fusionEnergy = this.HIS.buildDef(500, ['advancedPrinter'], 9, 5, 600, 100, 112, this.HIS.maintenanceDef(0, 10, 5, this.HIS.generatorDef(1000, 0, 0, 0, 0, 0, this.HIS.dataDef('fusionEnergy', 'He3 Thermo-Nuclear Fusion Reactor', 'icon-fire', ['energy', 'robots', 'he3']))));

  this.HIS.data.things.solarEnergy = this.HIS.deliveryDef(100, this.HIS.buildDef(30, [], 5, 2, 0, 50, 100, this.HIS.maintenanceDef(0, 5, 0, this.HIS.generatorDef(150, 0, 0, 0, 0, 0, this.HIS.dataDef('solarEnergy', 'Solar Energy Panel', 'icon-certificate', ['energy', 'robots'])))));

  this.HIS.data.things.battery = this.HIS.deliveryDef(20, this.HIS.generatorDef(10, 0, 0, 0, 0, 0, this.HIS.dataDef('battery', 'Battery', 'icon-lemon', ['energy'])));

  this.HIS.data.things.robotFactory = this.HIS.buildDef(30, [], 2, 3, 100, 150, 50, this.HIS.maintenanceDef(5, 0, 0, this.HIS.dataDef('robotFactory', 'Robot Factory', 'icon-cogs', ['factory', 'energy'])));

  this.HIS.data.things.basicPrinter = this.HIS.buildDef(100, [], 3, 3, 0, 0, 0, this.HIS.maintenanceDef(15, 5, 0, this.HIS.dataDef('basicPrinter', 'Basic 3D Printer', 'icon-print', ['factory', 'energy', 'robots'])));

  this.HIS.data.things.advancedPrinter = this.HIS.buildDef(100, ['basicPrinter'], 7, 5, 300, 350, 250, this.HIS.maintenanceDef(30, 10, 0, this.HIS.dataDef('advancedPrinter', 'Advanced 3D Printer', 'icon-print', ['factory', 'energy', 'robots'])));

  this.HIS.data.things.greatAntenna = this.HIS.buildDef(1000, ['advancedPrinter'], 15, 7, 0, 500, 300, this.HIS.maintenanceDef(30, 0, 0, this.HIS.dataDef('greatAntenna', 'Great Antenna', 'icon-rss', ['communication', 'energy'])));

  this.HIS.data.things.telescope = this.HIS.buildDef(100, ['basicPrinter'], 2, 2, 130, 220, 170, this.HIS.maintenanceDef(3, 0, 0, this.HIS.dataDef('telescope', 'Telescope', 'icon-search', ['communication', 'energy'])));

  this.HIS.data.things.laser = this.HIS.buildDef(500, ['advancedPrinter'], 10, 5, 0, 0, 0, this.HIS.maintenanceDef(1000, 15, 0, this.HIS.dataDef('laser', 'Tactical High Energy Laser', 'icon-fighter-jet', ['defense', 'energy', 'robots'])));

  this.HIS.data.things.shield = this.HIS.buildDef(100, ['laser'], 10, 15, 0, 0, 0, this.HIS.maintenanceDef(1000, 20, 0, this.HIS.dataDef('shield', 'Meteor Defense Shield', 'icon-minus-sign', ['defense', 'energy', 'robots'])));

  this.HIS.data.things.smallSilo = this.HIS.buildDef(0, [], 0, 1, 100, 0, 0, this.HIS.maintenanceDef(1, 10, 0, this.HIS.generatorDef(0, 0, 0, 0, 0, 200, this.HIS.dataDef('smallSilo', 'Small Silo', 'icon-building', ['silo', 'energy', 'robots', 'storage']))));

  this.HIS.data.things.mediumSilo = this.HIS.buildDef(0, [], 0, 2, 200, 0, 0, this.HIS.maintenanceDef(1, 20, 0, this.HIS.generatorDef(0, 0, 0, 0, 0, 500, this.HIS.dataDef('mediumSilo', 'Medium Silo', 'icon-building', ['silo', 'energy', 'robots', 'storage']))));

  this.HIS.data.things.bigSilo = this.HIS.buildDef(0, [], 0, 3, 300, 0, 0, this.HIS.maintenanceDef(1, 30, 0, this.HIS.generatorDef(0, 0, 0, 0, 0, 800, this.HIS.dataDef('bigSilo', 'Big Silo', 'icon-building', ['silo', 'energy', 'robots', 'storage']))));

  this.HIS.data.things.monkeys = this.HIS.buildDef(500, ['waterExtractor'], 0, 3, 0, 0, 0, this.HIS.maintenanceDef(100, 0, 0, this.HIS.dataDef('monkeys', 'Monkey Bio-Dome', 'icon-home', ['silo', 'energy'])));

  this.HIS.data.things.humans = this.HIS.buildDef(800, ['waterExtractor'], 0, 4, 0, 0, 0, this.HIS.maintenanceDef(500, 0, 0, this.HIS.dataDef('humans', 'Human Bio-Dome', 'icon-home', ['silo', 'energy'])));

  this.HIS.data.constants = {
    money: "MUSD"
  };

  $(function() {
    HIS.state.budget.regular = initialAvailableToPlace();
    $("#screen-budget").on('click', '.deliverable .add', function() {
      var id, item, price;

      id = $(this).parents('.deliverable').data('id');
      console.log("adding " + id);
      price = HIS.data.things[id].delivery.costs;
      item = HIS.state.budget.regular[id];
      if (HIS.state.currentBudget.deliverables + price <= HIS.state.resources.money) {
        HIS.state.currentBudget.deliverables += price;
        item.quantity++;
      } else {
        alert("not enough budget to create " + HIS.data.things[id].name);
      }
      $('#screen-budget .total').text(HIS.state.currentBudget.deliverables);
      $("#screen-budget .deliverable[data-id='" + id + "'] .amount").text(item.quantity);
      return $("#screen-budget .deliverable[data-id='" + id + "'] .total-cost").text(item.quantity * price);
    });
    $("#screen-budget").on('click', '.deliverable .remove', function() {
      var id, item, price;

      id = $(this).parents('.deliverable').data('id');
      console.log("removing " + id);
      price = HIS.data.things[id].delivery.costs;
      item = HIS.state.budget.regular[id];
      if (item.quantity > 0) {
        HIS.state.currentBudget.deliverables -= price;
        item.quantity--;
      }
      $('#screen-budget .total').text(HIS.state.currentBudget.deliverables);
      $("#screen-budget .deliverable[data-id='" + id + "'] .amount").text(item.quantity);
      return $("#screen-budget .deliverable[data-id='" + id + "'] .total-cost").text(item.quantity * price);
    });
    HIS.beforeBudgetListener.push(fillBudget);
    return HIS.beforeMoonListener.push(processBudget);
  });

  fillBudget = function() {
    var context, item, key, _ref;

    HIS.state.currentBudget = {
      specials: 0,
      deliverables: 0
    };
    _ref = HIS.state.budget.special;
    for (key in _ref) {
      item = _ref[key];
      HIS.state.currentBudget.specials += item.value;
    }
    context = {
      specials: HIS.state.budget.special,
      deliverables: (function() {
        var _ref1, _results;

        _ref1 = HIS.data.things;
        _results = [];
        for (key in _ref1) {
          item = _ref1[key];
          if (__indexOf.call(item.keywords, 'delivery') >= 0) {
            _results.push(item);
          }
        }
        return _results;
      })(),
      total: 0
    };
    return $("#screen-budget").html(Handlebars.templates['budget-table.hb'](context));
  };

  processBudget = function() {
    return HIS.state.resources.money -= HIS.state.currentBudget.deliverables;
  };

  this.knobDefaults = {
    draw: function() {
      var a, ea, eat, r, sa, sat;

      if (this.$.data("skin") === "tron") {
        a = this.angle(this.cv);
        sa = this.startAngle;
        sat = this.startAngle;
        ea = void 0;
        eat = sat + a;
        r = true;
        this.g.lineWidth = this.lineWidth;
        this.o.cursor && (sat = eat - 0.3) && (eat = eat + 0.3);
        if (this.o.displayPrevious) {
          ea = this.startAngle + this.angle(this.value);
          this.o.cursor && (sa = ea - 0.3) && (ea = ea + 0.3);
          this.g.beginPath();
          this.g.strokeStyle = this.previousColor;
          this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sa, ea, false);
          this.g.stroke();
        }
        this.g.beginPath();
        this.g.strokeStyle = (r ? this.o.fgColor : this.fgColor);
        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sat, eat, false);
        this.g.stroke();
        this.g.lineWidth = 2;
        this.g.beginPath();
        this.g.strokeStyle = this.o.fgColor;
        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth + 1 + this.lineWidth * 2 / 3, 0, 2 * Math.PI, false);
        this.g.stroke();
        return false;
      }
    }
  };

  createRexDialog = function() {
    var message;

    message = [];
    if (this.HIS.findCellsByThingId('vacuum').length === 0) {
      message.push("I think that a " + this.HIS.data.things.vacuum.name + " could help us start the He3 harvest.");
    }
    if (this.HIS.findCellsByThingId('bulldozer').length === 0 && this.HIS.state.turn > 10) {
      message.push("I think that a " + this.HIS.data.things.bulldozer.name + " could greately improve our He3 income.");
    }
    if (this.HIS.resourceStatus().energy.gross <= 0) {
      message.push("Energy situation on the moon is critical, We need energy now, send batteries.");
    }
    return message;
  };

  createYrionDialog = function() {
    var message;

    message = [];
    if (this.HIS.state.turn < 10) {
      message.push("We need more money to begin our research on colonization.");
    }
    if (this.HIS.findCellsByThingId('h2o').length === 0) {
      message.push("In order to populate the moon, we need water.");
      if (this.HIS.findCellsByThingId('basicPrinter').length === 0) {
        message.push("To create the water refinery, we need to create a " + this.HIS.data.things.basicPrinter.name + ".");
      } else {
        if (this.HIS.findCellsByThingId('printer2').length === 0) {
          message.push("We need a more advanced printer to build the H2O refinery.");
        }
      }
    } else {
      if (this.HIS.findCellsByThingId('monkeys').length === 0) {
        if (this.HIS.resources.money < this.HIS.data.things.monkeys.delivery.costs * 0.2) {
          message.push(" In order to send the monkeys, we need more money");
        } else if (this.HIS.resources.money < this.HIS.data.things.monkeys.delivery.costs * 0.8) {
          message.push("We are close to send the monkeys, but we need a little more money");
        } else {
          message.push("Now that we have the money, let's build the " + this.HIS.data.things.monkeys.name + " dome.");
        }
      } else {
        message.push("Our final step is ahead of as, let's build the " + this.HIS.data.things.monkeys.name + " dome.");
      }
    }
    return message;
  };

  createJakeDialog = function() {
    var message;

    message = [];
    if (this.HIS.state.turn < 5) {
      message.push("I'm currently on the final state of contract negociations, give me some time and I will close the deal.");
    } else if (this.HIS.state.turn < 8) {
      message.push("We are almost ready with the contract. We will need a big energy input. Consider building a " + this.HIS.data.things.fusionEnergy.name + ".");
    } else if (this.HIS.state.turn < 12) {
      message.push("We are going to build a laser.");
      message.push("We will be needing many robots for its maintenance and a lot of cash.");
    } else if (this.HIS.state.turn === 15) {
      this.HIS.state.firstJakeQuestCompleted = 'given';
      message.push("I'm very exited to tell you that we got that contract.");
      message.push("If we build the " + this.HIS.data.things.laser.name + ", the earth goverment is going to pay us 1000 credits.");
      message.push("The ugly part is that we only have 5 turns to acomplish this.");
      message.push("With your help we can make it!.");
    }
    if (this.HIS.state.turn < 20 && this.HIS.state.firstJakeQuestCompleted === 'given') {
      message.push("Hurry up!, we only have till turn 20 to build the " + this.HIS.data.things.laser.name + ".");
    }
    if (this.HIS.state.turn === 20) {
      if (this.HIS.state.firstJakeQuestCompleted === 'completed') {
        this.HIS.state.resources.money += 1000;
        message.push("Excelent job! The earth government has just wired us the credits.");
      } else {
        message.push("You failed, the quest was not completed.");
      }
    }
    if (this.HIS.state.firstJakeQuestCompleted === 'completed') {
      if (this.HIS.state.turn === 23) {
        message.push("The first quest was great, let's keep doing a amazing job.");
        message.push("Get ready for the next quest!");
      } else if (this.HIS.state.turn < 26) {
        message.push("I'm very exited to tell you that we got another contract.");
      } else if (this.HIS.state.turn < 29) {
        message.push("The earth government is very impressed with the results of the last contract.");
        message.push("This time if we build the " + this.HIS.data.things.shield.name + ", they are going to permanently finance our operations.");
        message.push("The sake of humanity cannot be left to the dices.");
        message.push("Beware that this time we only have 7 turns.");
      } else if (this.HIS.state.turn < 36) {
        message.push("Hurry up!, we only have " + (36 - this.HIS.state.turn) + " turns left to build the " + this.HIS.data.things.laser.name + ".");
      } else {
        message.push("You failed to build the " + this.HIS.data.things.laser.name + ". I have nothing else to discuss with you.");
      }
    }
    return message;
  };

  createWalloDialogs = function() {
    switch (this.HIS.state.turn) {
      case 1:
        return ["Good luck my fellow citizen!"];
      case 2:
        return ["Remember, you need robots and energy to keep this journey!"];
      case 3:
        return ["@$%&#@?¿&%$"];
      case 4:
        return ["If you wanna be like me, dont loose hope."];
      case 7:
        return ["Remember to check your budget."];
      case 13:
        return ["Jake can help you get more money."];
      default:
        return ["Woff."];
    }
  };

  createTelescopeDialogs = function() {
    var currentAntenas, expectedAntenas, message;

    message = [];
    currentAntenas = this.HIS.findCellsByKeyword('communication').length;
    expectedAntenas = this.HIS.state.turn * 0.15;
    if (currentAntenas < expectedAntenas) {
      message.push("We could be receiving signals from outer space right now.");
      message.push("Acording to my schedules, we need " + expectedAntenas + ", but we currently only have " + currentAntenas + ".");
      message.push("I think that a Antena is nedeed.");
    } else {
      message.push("Our outer space exploration is going very good. Nice!");
    }
    return message;
  };

  window.getDialogs = function() {
    var guided, nonGuided;

    guided = [];
    nonGuided = {};
    switch (this.HIS.state.turn) {
      case 0:
        guided = [
          {
            author: 'jake',
            message: 'Welcome onboard!!'
          }, {
            author: 'jake',
            message: 'Let us introduce ourselves.'
          }, {
            author: 'jake',
            message: "I'm " + this.HIS.data.advisors.jake.name + ", " + this.HIS.data.advisors.jake.specialty + "."
          }, {
            author: 'rex_charger',
            message: "I'm " + this.HIS.data.advisors.rex_charger.name + ", " + this.HIS.data.advisors.rex_charger.specialty + "."
          }, {
            author: 'dr_yrion',
            message: "I'm " + this.HIS.data.advisors.dr_yrion.name + ", " + this.HIS.data.advisors.dr_yrion.specialty + "."
          }, {
            author: 'col_telescope',
            message: "I'm " + this.HIS.data.advisors.col_telescope.name + ", " + this.HIS.data.advisors.col_telescope.specialty + "."
          }, {
            author: 'dr_wallo',
            message: "And finally I'm " + this.HIS.data.advisors.dr_wallo.name + ", " + this.HIS.data.advisors.dr_wallo.specialty + "."
          }, {
            author: 'dr_wallo',
            message: "We all are going to help you on your journey bootstrapping space industry in the moon."
          }, {
            author: 'col_telescope',
            message: "You will be responsible of all the operations, buiding and budget currently ongoing."
          }, {
            author: 'dr_yrion',
            message: "The last person in your charge was removed from its position, cause he made wrong decitions wich ended in an unhabitable, energy-less and unsustainable environment."
          }, {
            author: 'rex_charger',
            message: "The operation must go on and a delivery is already scheduled for tomorrow morning."
          }, {
            author: 'jake',
            message: "We expect you to purchase and send the necesary equipment to start your operations."
          }, {
            author: 'jake',
            message: "We will be meeting soon to discuss about your decitions."
          }, {
            author: 'jake',
            message: "Let's proceed with the budget!"
          }
        ];
        break;
      case 1:
        guided = [
          {
            author: 'jake',
            message: "Well done!"
          }, {
            author: 'jake',
            message: "From now on, we will expect you to lead the conversation."
          }, {
            author: 'dr_wallo',
            message: "We will be here to help you, on whatever goal you think it's the best for the moon."
          }, {
            author: 'dr_yrion',
            message: "Everyone of us has its own idea of what it's best, but the final decition it's up to you."
          }
        ];
        nonGuided = {
          'rex_charger': createRexDialog(),
          'dr_yrion': createYrionDialog(),
          'jake': createJakeDialog(),
          'dr_wallo': createWalloDialogs(),
          'col_telescope': createTelescopeDialogs()
        };
        break;
      default:
        nonGuided = {
          'rex_charger': createRexDialog(),
          'dr_yrion': createYrionDialog(),
          'jake': createJakeDialog(),
          'dr_wallo': createWalloDialogs(),
          'col_telescope': createTelescopeDialogs()
        };
    }
    return {
      guided: guided,
      nonGuided: nonGuided
    };
  };

  $(function() {
    var screen,
      _this = this;

    $("#advisors").html(Handlebars.templates['advisors.hb']({
      advisors: $.map(HIS.data.advisors, function(value, key) {
        return value;
      })
    }));
    $("#screen-meeting, #screen-budget, #screen-moon").hide();
    screen = 'meeting';
    HIS.beforeMeeting();
    $("#screen-meeting").show();
    updateInterface();
    setupDialog();
    HIS.beforeMeetingListener.push(function() {
      return HIS.state.resources.money += 100;
    });
    return $("#header").on(".next-btn").click(function() {
      $("#screen-meeting, #screen-budget, #screen-moon").hide();
      switch (screen) {
        case 'meeting':
          HIS.beforeBudget();
          $("#screen-budget").show('slide', {}, 500);
          screen = 'budget';
          break;
        case 'budget':
          HIS.beforeMoon();
          $("#screen-moon").show('slide', {}, 500);
          screen = 'moon';
          break;
        case 'moon':
          HIS.beforeMeeting();
          $("#screen-meeting").show('slide', {}, 500, function() {
            return setupDialog();
          });
          screen = 'meeting';
      }
      return updateInterface();
    });
  });

  updateInterface = function() {
    var context, k, res, resources;

    resources = HIS.resourceStatus();
    for (k in resources) {
      res = resources[k];
      if (res.input) {
        res.input = Math.floor(res.input * 10) / 10;
      }
      if (res.output) {
        res.output = Math.floor(res.output * 10) / 10;
      }
      if (res.gross) {
        res.gross = Math.floor(res.gross * 10) / 10;
      }
      if (res.total) {
        res.total = Math.floor(res.total * 10) / 10;
      }
    }
    context = {
      resources: resources,
      state: HIS.state
    };
    return $("#header").html(Handlebars.templates['header.hb'](context));
  };

  setupDialog = function() {
    var conversation, startGuided, startUnguided,
      _this = this;

    $("#advisors, #advisors .advisor").unbind('click');
    $("#advisor .advisor").removeClass('idle').popover('destroy');
    $("#advisor").off('click');
    console.log("set up dialog");
    conversation = getDialogs();
    console.log(conversation.nonGuided);
    $('#advisors .advisor').on('click', function(e) {
      if ($(e.currentTarget).hasClass('idle')) {
        e.stopPropagation();
        return startUnguided($(this).data('id'));
      }
    });
    startGuided = function() {
      var nextClick, onClick, showStep;

      $("#advisor .advisor").removeClass('idle');
      nextClick = function() {};
      onClick = function() {
        return nextClick();
      };
      showStep = function(index, author) {
        var advisorIcon, dialog;

        dialog = conversation.guided[index];
        $("#advisors .advisor").popover('destroy');
        if (!dialog) {
          $("#advisors").unbind('click');
          $("#advisors .advisor").addClass('idle');
          return;
        }
        nextClick = function() {
          return showStep(index + 1);
        };
        advisorIcon = $("#advisors .advisor[data-id='" + dialog.author + "']");
        advisorIcon.popover({
          animation: false,
          title: '',
          content: dialog.message,
          placement: 'bottom',
          trigger: 'manual'
        });
        return advisorIcon.popover('show');
      };
      $("#advisors").click(onClick);
      return showStep(0);
    };
    startUnguided = function(author) {
      var advisorIcon, dialog, nextClick, onClick, showStep;

      $("#advisors .advisor").removeClass('idle');
      console.log("asked for help from " + author);
      dialog = conversation.nonGuided[author] || ["I've got no counsel for now"];
      nextClick = function() {};
      onClick = function(e) {
        return nextClick();
      };
      advisorIcon = $("#advisors .advisor[data-id='" + author + "']");
      showStep = function(index) {
        var message;

        $("#advisors .advisor").popover('destroy');
        message = dialog[index];
        console.log("" + author + ":" + index + " '" + message + "'");
        if (!message) {
          $("#advisors").unbind('click');
          $("#advisors .advisor").addClass("idle");
          return;
        }
        nextClick = function() {
          return showStep(index + 1);
        };
        advisorIcon.popover({
          animation: false,
          title: '',
          content: message,
          placement: 'bottom',
          trigger: 'manual'
        });
        return advisorIcon.popover('show');
      };
      showStep(0);
      return $("#advisors").click(onClick);
    };
    return startGuided();
  };

  $(function() {
    var renderMoonMap, renderMoonStats;

    renderMoonStats = function() {
      var context, state;

      state = HIS.resourceStatus();
      context = {
        resources: HIS.resourceStatus(),
        state: HIS.state
      };
      return $("#area-stats").html(Handlebars.templates['globalStats.hb'](context));
    };
    renderMoonMap = function() {
      var moonMap;

      console.log("Rendering Moon");
      moonMap = [0, 1, 2, 3, 4, 5, 6, 7].map(function(i) {
        return [0, 1, 2, 3, 4, 5, 6, 7, 8].map(function(j) {
          return {
            i: i,
            j: j,
            id: i * j,
            area: HIS.state.moon.cells[j * 9 + i]
          };
        });
      });
      $('#moon-areas').html(Handlebars.templates['moon.hb']({
        rows: moonMap.map(function(cells, i) {
          return {
            cells: cells,
            rowNumber: i
          };
        }),
        colNumber: [0, 1, 2, 3, 4, 5, 6, 7, 8]
      }));
      renderMoonStats();
      $('.area').on('click', function() {
        var area, buildings, i, j, placeable, pos;

        i = $(this).data('i');
        j = $(this).data('j');
        pos = j * 9 + i;
        area = HIS.state.moon.cells[pos];
        placeable = $.map(HIS.state.availableToPlace, function(v) {
          return v;
        }).filter(function(t) {
          return t.id !== 'scv';
        }).map(function(p) {
          return {
            thing: HIS.data.things[p.id],
            quantity: p.quantity
          };
        });
        buildings = HIS.buildables();
        $('#area-info').empty();
        $('#area-info').unbind('shown');
        $('#area-info').html(Handlebars.templates['area.hb']({
          buildings: buildings,
          placeable: placeable,
          i: i,
          j: j,
          area: area
        }));
        $('#area-info').modal('show');
        $('.knob').hide();
        return $('#area-info').on('shown', function() {
          $('.knob').knob(knobDefaults);
          $('.knob').show();
          $('#power').bootstrapSwitch();
          $('.building').on('click', function() {
            HIS.build($(this).data('id'), pos);
            $('#area-info').modal('hide');
            return renderMoonMap();
          });
          return $('.placeable').on('click', function() {
            if ($(this).data('quantity') > 0) {
              HIS.placeFromAvailables($(this).data('id'), pos);
              $('#area-info').modal('hide');
              return renderMoonMap();
            }
          });
        });
      });
      return $('.area').hover(function() {
        var area, i, j, pos;

        i = $(this).data('i');
        j = $(this).data('j');
        pos = j * 9 + i;
        area = HIS.state.moon.cells[pos];
        $('#area-stats').html(Handlebars.templates['areaStats.hb']({
          i: i,
          j: j,
          area: area
        }));
        $('.knob').hide();
        $('.knob').knob(knobDefaults);
        return $('.knob').show();
      }).mouseleave(function() {
        return renderMoonStats();
      });
    };
    return HIS.beforeMoonListener.push(renderMoonMap);
  });

}).call(this);
